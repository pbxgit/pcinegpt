/*
================================================================
TRAKT.JS - AWWWARDS REBUILD 2025 (ENHANCED & ROBUST)
- Manages the secure OAuth 2.0 PKCE authentication flow for Trakt.tv.
- Handles all authenticated API requests with improved error handling.
- Implements token management and automatic logout on authorization failure.
================================================================
*/

import { saveTraktTokens, getTraktTokens, clearTraktTokens } from './storage.js';

// --- Configuration ---
const CLIENT_ID = '4817758e941a6135b5efc85f8ec52d5ebd72b677fab299fb94f2bb5d1bcb8843';
const REDIRECT_URI = window.location.origin + window.location.pathname;
const TRAKT_API_URL = 'https://api.trakt.tv';

// --- PKCE & AUTHENTICATION FLOW ---

/**
 * Generates a cryptographically secure random string for the PKCE code verifier.
 * @param {number} length The length of the verifier string.
 * @returns {string} The generated code verifier.
 */
function generateCodeVerifier(length) {
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
    let text = '';
    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

/**
 * Creates a SHA-256 hash of the code verifier, formatted for the PKCE code challenge.
 * @param {string} verifier The code verifier generated by `generateCodeVerifier`.
 * @returns {Promise<string>} The resulting code challenge.
 */
async function generateCodeChallenge(verifier) {
    const encoder = new TextEncoder();
    const data = encoder.encode(verifier);
    const digest = await window.crypto.subtle.digest('SHA-256', data);
    return btoa(String.fromCharCode(...new Uint8Array(digest)))
        .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}

/**
 * Generates PKCE codes and redirects the user to the Trakt.tv authorization page.
 */
export async function redirectToTraktAuth() {
    const verifier = generateCodeVerifier(128);
    sessionStorage.setItem('trakt_code_verifier', verifier);
    const challenge = await generateCodeChallenge(verifier);

    const authUrl = new URL(`${TRAKT_API_URL}/oauth/authorize`);
    authUrl.searchParams.append('response_type', 'code');
    authUrl.searchParams.append('client_id', CLIENT_ID);
    authUrl.searchParams.append('redirect_uri', REDIRECT_URI);
    authUrl.searchParams.append('code_challenge', challenge);
    authUrl.searchParams.append('code_challenge_method', 'S256');

    window.location.href = authUrl.toString();
}

/**
 * Handles the callback from Trakt.tv after authorization, exchanging the auth code for tokens.
 * @param {string} authCode The authorization code from the URL query parameters.
 */
export async function handleTraktCallback(authCode) {
    const verifier = sessionStorage.getItem('trakt_code_verifier');
    if (!verifier) {
        throw new Error('Code verifier not found in session storage. Authentication cannot proceed.');
    }

    const body = JSON.stringify({
        code: authCode,
        client_id: CLIENT_ID,
        redirect_uri: REDIRECT_URI,
        grant_type: 'authorization_code',
        code_verifier: verifier
    });

    try {
        const response = await fetch(`${TRAKT_API_URL}/oauth/token`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body
        });

        if (!response.ok) {
            const errorDetails = await response.json().catch(() => ({ error_description: 'Unknown error during token exchange.' }));
            throw new Error(`Failed to fetch token: ${errorDetails.error_description}`);
        }

        const tokens = await response.json();
        saveTraktTokens(tokens);
    } catch (error) {
        console.error('Error during Trakt token exchange:', error);
        clearTraktTokens(); // Ensure partial/failed auth state is cleared
    } finally {
        sessionStorage.removeItem('trakt_code_verifier');
        // Clean the URL of auth codes
        window.history.replaceState({}, document.title, window.location.pathname);
    }
}

/**
 * Clears user tokens from storage and reloads the page to reset the application state.
 */
export function logoutTrakt() {
    clearTraktTokens();
    location.reload();
}


// --- CORE API FETCHER ---

/**
 * A robust, centralized function for making authenticated requests to the Trakt.tv API.
 * @param {string} endpoint The API endpoint to request (e.g., '/users/me/stats').
 * @param {object} [options={}] Optional fetch options (method, body, etc.).
 * @returns {Promise<any>} The JSON response from the API.
 * @throws {Error} If the user is not authenticated or if the API returns an error.
 */
async function fetchFromTrakt(endpoint, options = {}) {
    const tokens = getTraktTokens();
    if (!tokens) {
        throw new Error('User is not authenticated with Trakt.');
    }

    const url = `${TRAKT_API_URL}${endpoint}`;
    const headers = {
        'Content-Type': 'application/json',
        'trakt-api-version': '2',
        'trakt-api-key': CLIENT_ID,
        'Authorization': `Bearer ${tokens.access_token}`
    };

    const config = { headers, ...options };

    const response = await fetch(url, config);

    // Handle successful but empty responses (e.g., from POST/DELETE actions)
    if (response.status === 204) {
        return { success: true };
    }

    if (!response.ok) {
        // If unauthorized, the token is likely expired/revoked. Log out automatically.
        if (response.status === 401) {
            console.warn('Trakt authentication failed (401). Logging out.');
            logoutTrakt();
        }
        const errorText = await response.text();
        throw new Error(`Trakt API error! Status: ${response.status}. Response: ${errorText}`);
    }

    return response.json();
}


// --- EXPORTED API FUNCTIONS ---

/**
 * Fetches the current user's statistics.
 * @returns {Promise<object>} User stats object.
 */
export function getUserStats() {
    return fetchFromTrakt('/users/me/stats');
}

/**
 * Fetches the user's highly-rated (9 and 10) movies and shows.
 * @returns {Promise<Array<object>>} A combined array of highly-rated items.
 */
export async function getTraktRatings() {
    const requests = [
        fetchFromTrakt('/users/me/ratings/movies/10?limit=10'),
        fetchFromTrakt('/users/me/ratings/shows/10?limit=10'),
        fetchFromTrakt('/users/me/ratings/movies/9?limit=10'),
        fetchFromTrakt('/users/me/ratings/shows/9?limit=10')
    ];
    const results = await Promise.all(requests);
    return results.flat(); // Combine all results into a single array
}

/**
 * Fetches the user's complete movie and show watchlist.
 * @returns {Promise<Array<object>>} A combined array of watchlist items.
 */
export async function getWatchlist() {
    const [movies, shows] = await Promise.all([
        fetchFromTrakt('/users/me/watchlist/movies'),
        fetchFromTrakt('/users/me/watchlist/shows')
    ]);
    return [...movies, ...shows];
}

/**
 * Adds a media item to the user's Trakt.tv watchlist.
 * @param {object} item - The media item to add.
 * @param {number} item.id - The TMDB ID.
 * @param {string} item.title - The title.
 * @param {number} item.year - The release year.
 * @param {string} item.type - The media type ('movie' or 'tv').
 * @returns {Promise<object>} API response.
 */
export function addToWatchlist({ id, title, year, type }) {
    const payload = {
        [type === 'tv' ? 'shows' : 'movies']: [{ title, year, ids: { tmdb: id } }]
    };
    return fetchFromTrakt('/sync/watchlist', {
        method: 'POST',
        body: JSON.stringify(payload)
    });
}

/**
 * Removes a media item from the user's Trakt.tv watchlist.
 * @param {object} item - The media item to remove.
 * @param {number} item.id - The TMDB ID.
 * @param {string} item.title - The title.
 * @param {number} item.year - The release year.
 * @param {string} item.type - The media type ('movie' or 'tv').
 * @returns {Promise<object>} API response.
 */
export function removeFromWatchlist({ id, title, year, type }) {
    const payload = {
        [type === 'tv' ? 'shows' : 'movies']: [{ title, year, ids: { tmdb: id } }]
    };
    return fetchFromTrakt('/sync/watchlist/remove', {
        method: 'POST',
        body: JSON.stringify(payload)
    });
}
