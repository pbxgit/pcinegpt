/*
================================================================
TRAKT.JS - TRAKT.TV API & AUTHENTICATION MODULE (REFACTORED)
- Manages the full OAuth 2.0 PKCE authentication flow.
- Provides a robust, centralized function for all authenticated API requests.
- Exports clear, single-purpose functions for fetching user-specific data.
- Aligns with the API Configuration section of the project README.
================================================================
*/

import { saveTraktTokens, getTraktTokens, clearTraktTokens } from './storage.js';

// --- Configuration (As per project README) ---

// IMPORTANT: Replace with your Trakt.tv application's Client ID.
const CLIENT_ID = '4817758e941a6135b5efc85f8ec52d5ebd72b677fab299fb94f2bb5d1bcb8843';

// IMPORTANT: Replace with your live Netlify site URL.
const REDIRECT_URI = 'https://pcinegpt.netlify.app';

const TRAKT_API_URL = 'https://api.trakt.tv';
const CODE_VERIFIER_KEY = 'trakt_code_verifier';

// --- PKCE (Proof Key for Code Exchange) Helper Functions ---

/**
 * Generates a cryptographically random string for the OAuth 2.0 PKCE flow.
 * @param {number} length - The desired length of the verifier string.
 * @returns {string} The generated code verifier.
 */
function generateCodeVerifier(length) {
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
    let text = '';
    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

/**
 * Creates a SHA-256 hash of the code verifier, formatted for the PKCE flow.
 * @param {string} verifier - The code verifier generated by `generateCodeVerifier`.
 * @returns {Promise<string>} The resulting URL-safe base64-encoded code challenge.
 */
async function generateCodeChallenge(verifier) {
    const encoder = new TextEncoder();
    const data = encoder.encode(verifier);
    const digest = await window.crypto.subtle.digest('SHA-256', data);

    return btoa(String.fromCharCode(...new Uint8Array(digest)))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
}

// --- Core Authentication Flow ---

/**
 * Initiates the authentication process by redirecting the user to Trakt.tv.
 */
export async function redirectToTraktAuth() {
    const verifier = generateCodeVerifier(128);
    sessionStorage.setItem(CODE_VERIFIER_KEY, verifier);
    const challenge = await generateCodeChallenge(verifier);
    
    const authUrl = new URL(`${TRAKT_API_URL}/oauth/authorize`);
    authUrl.searchParams.set('response_type', 'code');
    authUrl.searchParams.set('client_id', CLIENT_ID);
    authUrl.searchParams.set('redirect_uri', REDIRECT_URI);
    authUrl.searchParams.set('code_challenge', challenge);
    authUrl.searchParams.set('code_challenge_method', 'S256');
    
    window.location.href = authUrl.toString();
}

/**
 * Handles the callback from Trakt after the user authorizes the application.
 * @param {string} authCode - The authorization code from the URL query parameters.
 */
export async function handleTraktCallback(authCode) {
    const verifier = sessionStorage.getItem(CODE_VERIFIER_KEY);
    if (!verifier) {
        throw new Error('OAuth Error: Code verifier not found in session storage.');
    }

    const body = JSON.stringify({
        code: authCode,
        client_id: CLIENT_ID,
        redirect_uri: REDIRECT_URI,
        grant_type: 'authorization_code',
        code_verifier: verifier
    });

    try {
        const response = await fetch(`${TRAKT_API_URL}/oauth/token`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body
        });

        if (!response.ok) {
            throw new Error(`Token exchange failed with status: ${response.status}`);
        }

        const tokens = await response.json();
        saveTraktTokens(tokens);
    } catch (error) {
        console.error('Error during Trakt token exchange:', error);
        clearTraktTokens(); // Ensure corrupted/failed tokens are cleared
    } finally {
        sessionStorage.removeItem(CODE_VERIFIER_KEY);
        // Clean the URL of auth codes
        window.history.replaceState({}, document.title, window.location.pathname);
    }
}

/**
 * Logs the user out by clearing their tokens and reloading the page.
 */
export function logoutTrakt() {
    clearTraktTokens();
    console.log('User logged out from Trakt.tv.');
    location.reload();
}

// --- Authenticated API Fetching ---

/**
 * A centralized and robust fetch function for making authenticated Trakt API calls.
 * @param {string} endpoint - The API endpoint to request (e.g., '/users/me/stats').
 * @returns {Promise<any>} A promise that resolves to the JSON response from the API.
 * @throws {Error} If the user is not authenticated or if the API returns an error.
 */
async function fetchFromTrakt(endpoint) {
    const tokens = getTraktTokens();
    if (!tokens) {
        throw new Error('Trakt API Error: User is not authenticated.');
    }

    const url = `${TRAKT_API_URL}${endpoint}`;
    const headers = {
        'Content-Type': 'application/json',
        'trakt-api-version': '2',
        'trakt-api-key': CLIENT_ID,
        'Authorization': `Bearer ${tokens.access_token}`
    };

    const response = await fetch(url, { headers });

    if (!response.ok) {
        // If the token is expired or invalid, log the user out to force re-authentication.
        if (response.status === 401) {
            console.error('Trakt token unauthorized. Logging out.');
            logoutTrakt();
        }
        throw new Error(`Trakt API request failed: ${response.status} ${response.statusText}`);
    }
    
    // Some Trakt responses might be empty (e.g., 204 No Content), handle this gracefully.
    if (response.status === 204) {
        return null;
    }

    return response.json();
}

// --- Exported Data Fetching Functions ---

/**
 * Fetches the user's aggregated statistics.
 * @returns {Promise<object>} The user's stats object.
 */
export function getUserStats() {
    return fetchFromTrakt('/users/me/stats');
}

/**
 * Fetches the user's most recent watch history (movies and shows).
 * @param {number} [limit=15] - The number of items to fetch per type.
 * @returns {Promise<Array<object>>} A combined list of watched movies and shows.
 */
export async function getTraktHistory(limit = 15) {
    const [movies, shows] = await Promise.all([
        fetchFromTrakt(`/users/me/history/movies?limit=${limit}`),
        fetchFromTrakt(`/users/me/history/shows?limit=${limit}`)
    ]);
    return [...(movies || []), ...(shows || [])];
}

/**
 * Fetches the user's highest-rated items (9s and 10s).
 * @param {number} [limit=15] - The number of items to fetch per type/rating.
 * @returns {Promise<Array<object>>} A combined list of highly-rated movies and shows.
 */
export async function getTraktRatings(limit = 15) {
    const [movies10, shows10, movies9, shows9] = await Promise.all([
        fetchFromTrakt(`/users/me/ratings/movies/10?limit=${limit}`),
        fetchFromTrakt(`/users/me/ratings/shows/10?limit=${limit}`),
        fetchFromTrakt(`/users/me/ratings/movies/9?limit=${limit}`),
        fetchFromTrakt(`/users/me/ratings/shows/9?limit=${limit}`)
    ]);
    return [...(movies10 || []), ...(shows10 || []), ...(movies9 || []), ...(shows9 || [])];
}
